rules_version = '2';

/* request.auth.uid 為經過 token 驗證的用戶 id。你無法生成其他用戶的 token (無法冒用), 因此能保證其安全性及正確性 */

service cloud.firestore {
    match /databases/{database}/documents {

        /* Users */
        match /Users/{userId} {
            // 任何人都可以讀用戶資料
            allow read: if true;
            // 確定用戶是本人, 並且不存在惡意改權限之行為可建立用戶資料
            allow create: if isOwner(userId) && incomingData().role == "user";
            // 確定用戶是本人, 並且不存在惡意改權限之行為可更新用戶資料
            allow update: if isOwner(userId);
            // 只有管理員可刪除用戶資料
            allow delete: if getUserData().role  == "admin";
        }

        /* UserCharacters */
        match /UserCharacters/{userId} {
            // 任何人都可以讀用戶角色資料 (之後可加上權限控制, 如是否開啟查看戰績)
            allow read: if true;
            // 確定用戶是本人, 才可以寫入角色資料
            allow write: if isOwner(userId);
        }

        /* UserMemoryOfChaos */
        match /UserMemoryOfChaos/{userId} {
            // 任何人都可以讀用戶混沌回憶資料 (之後可加上權限控制, 如是否開啟查看戰績)
            allow read: if true;
            // 確定用戶是本人, 才可以寫入用戶混沌回憶資料
            allow write: if isOwner(userId);
        }

        /* CharacterComments */
        match /CharacterComments/{charId} {
            // 任何人都可以讀角色資料
            allow read: if true;
            // 確定用戶是本人才能留言
            allow create: if 
            incomingData().comments.size() == 1 &&
            isOwner(incomingData().comments[0].user_id);
            // 確定用戶是本人才能留言
            allow update: if 
            incomingData().comments.size() == (existingData().comments.size() + 1) && 
            isOwner(incomingData().comments[incomingData().comments.size()-1].user_id) &&
            incomingData().comments[incomingData().comments.size()-1].content != "";
            // 管理員才能刪除留言
            allow delete: if getUserData().role  == "admin";
        }

    }

    /* Functions */

    function getUserData(){
        return get(/database/$(database)/documents/Users/$(request.auth.uid)).data
    }

    function isSignIn() {
        return request.auth != null
    }

    function isOwner(userId) {
        return request.auth.uid == userId
    }

    function existingData(){
        return resource.data
    }

    function incomingData(){
        return request.resource.data
    }
}